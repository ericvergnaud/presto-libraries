// returns a random UUID as defined by http://www.ietf.org/rfc/rfc4122.txt
define randomUuid as native method returning Uuid doing:
	Java: return java.util.UUID.randomUUID();
	C#: return System.Guid.NewGuid();
	Python2: return uuid4() from module: uuid
	Python3: return uuid4() from module: uuid
	JavaScript: return UUID.create(); from module: prompto/intrinsic/UUID.js

// waits for n milliseconds (consuming all CPU in JavaScript)
define sleep as native method receiving Integer millis doing:
	Java: java.lang.Thread.sleep(millis);
	C#: prompto.utils.Utils.Sleep(millis);
	Python2: sleep(millis) from module: prompto.utils.Utils
	Python3: sleep(millis) from module: prompto.utils.Utils
	JavaScript: sleep(millis); from module: prompto/utils/Utils.js


define isServer as native method returning Boolean doing:
	Java: return $context.isServer();
	C#: return false;
	Python2: return False
	Python3: return False
	JavaScript: return false;


define fetchTextResource as native method receiving path returning Text doing:
	Java: return $context.fetchTextResource(path);
	C#: return $context.fetchTextResource(path);
	Python2: return $context.fetchTextResource(path)
	Python3: return $context.fetchTextResource(path)
	JavaScript: return $context.fetchTextResource(path);


define fetchBinaryResource as native method receiving path returning Blob doing:
	Java: return $context.fetchBinaryResource(path);
	C#: return $context.fetchBinaryResource(path);
	Python2: return $context.fetchBinaryResource(path)
	Python3: return $context.fetchBinaryResource(path)
	JavaScript: return $context.fetchBinaryResource(path);
 

define nextSequenceValue as native method receiving Text name returning Integer doing:
	Java: return $store.nextSequenceValue(name);
	C#: return $store.NextSequenceValue(name);
	Python2: return $store.nextSequenceValue(name)
	Python3: return $store.nextSequenceValue(name)
	JavaScript: return $store.nextSequenceValue(name);


define "randomUuid is not null" as test method doing:
	uuid = randomUuid
and verifying: 
	uuid is not Nothing


define "sleeps for 1 second" as test method doing:
	start = now
	sleep 1000
	end = now
and verifying: 
	end >= start + 'PT1S'


define "nextSequenceValue increases" as test method doing:
	v1 = nextSequenceValue "BIG"
	v2 = nextSequenceValue "BIG"
	v3 = nextSequenceValue "BIG"
and verifying: 
	v1 = 1
	v2 = 2
	v3 = 3
